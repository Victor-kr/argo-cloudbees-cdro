---
daemonset:
  # Annotations to apply to the daemonset
  annotations: {}
  # additionals labels
  labels: {}
  affinity: {}
  # Include the daemonset
  enabled: true
  # Extra environment variables for Filebeat container.
  envFrom: []
  # - configMapRef:
  #     name: config-secret
  extraEnvs: []
  #  - name: MY_ENVIRONMENT_VAR
  #    value: the_value_goes_here
  extraVolumes:
    []
    # - name: extras
    #   emptyDir: {}
  extraVolumeMounts:
    []
    # - name: extras
    #   mountPath: /usr/share/extras
    #   readOnly: true
  hostNetworking: false
  # Allows you to add any config files in /usr/share/filebeat
  # such as filebeat.yml for daemonset
  filebeatConfig:
    filebeat.yml: |
      #filebeat.inputs:
      #- type: container
      #  paths:
      #    - /var/log/containers/*.log
      #  processors:
      #  - add_kubernetes_metadata:
      #      host: ${NODE_NAME}
      #      matchers:
      #      - logs_path:
      #          logs_path: "/var/log/containers/"
      filebeat.autodiscover:
        processors:
        - add_kubernetes_metadata:
            host: ${NODE_NAME}
            matchers:
            - logs_path:
                logs_path: "/var/log/containers/"
        providers:
          - type: kubernetes
            templates:
              - condition.equals:
                  kubernetes.container.name: "flow-web"
                config:
                  - type: docker
                    containers.ids:
                      - ${data.kubernetes.container.id}
                    multiline.pattern: '^\d\d\d\d(-\d\d){2} \d\d(:\d\d){2}\.\d+' #2019-09-13 21:34:43.179571
                    multiline.negate: true
                    multiline.match: after
                    timeout: 10s
                    fields_under_root: true
                    fields:
                      cbflow.component: "web"
                    processors:
                      - if:
                          regexp:
                            message: '^\d\d\d\d(-\d\d){2} \d\d(:\d\d){2}\.\d+ \* '
                        then:
                          - dissect:
                              tokenizer: "%{timestamp} * %{message}"
                              field: "message"
                              target_prefix: "log"
                          - if:
                              regexp:
                                log.message: '^ERROR:'
                            then:
                              - add_fields:
                                  target: ''
                                  fields:
                                    log.level: "ERROR"
                            else:
                              - if:
                                  regexp:
                                    log.message: '^WARNING:'
                                then:
                                  - add_fields:
                                      target: ''
                                      fields:
                                        log.level: "WARN"
                                else:
                                  - add_fields:
                                      target: ''
                                      fields:
                                        log.level: "STATUS"
                        else:
                          - if:
                              regexp:
                                message: '^\d\d\d\d(-\d\d){2} \d\d(:\d\d){2}\.\d+ \| [a-z0-9_-]+:[a-z]+ \| pid \d+ \|'
                            then:
                              # error logs
                              # 2019-09-13 21:35:49.470053 | php7:error | pid 402 | [client 192.168.37.161:22840] script '/opt/cbflow/apache/htdocs/elrekt.php' not found or unable to stat
                              - dissect:
                                  tokenizer: "%{timestamp} | %{level} | %{thread} | %{message}"
                                  field: "message"
                                  target_prefix: "log"
                              - script:
                                  lang: javascript
                                  source: >
                                      function process(ev) {
                                          var level = ev.Get("log.level");
                                          if (level !== null) {
                                              var ar = level.split(':');
                                              if (ar.length !== 2) {
                                                  throw "wrong array length for log.level: " + level;
                                              }
                                              ev.Put("log.module", ar[0]);
                                              if (ar[1] === 'error') {
                                                  ev.Put("log.level", "ERROR");
                                              } else if (ar[1] === 'warning') {
                                                  ev.Put("log.level", "WARN");
                                              } else if (ar[1] === 'debug') {
                                                  ev.Put("log.level", "DEBUG");
                                              } else if (ar[1] === 'notice') {
                                                  ev.Put("log.level", "INFO");
                                              } else if (ar[1] === 'info') {
                                                  ev.Put("log.level", "INFO");
                                              } else if (ar[1] === 'alert') {
                                                  ev.Put("log.level", "ALERT");
                                              } else if (ar[1] === 'emerg') {
                                                  ev.Put("log.level", "CRIT");
                                              } else if (ar[1] === 'crit') {
                                                  ev.Put("log.level", "CRIT");
                                              } else if (ar[1].indexOf('trace') === 0) {
                                                  ev.Put("log.level", "TRACE");
                                              } else {
                                                  ev.Put("log.level", ar[1]);
                                              }
                                          }
                                          return ev;
                                      };
                                      function test() {
                                          var ev;
                                          ev = process(new Event({log: {level: "php7:error"}}));
                                          if (ev.Get("log.module") !== "php7") {
                                              throw "expected log.module === php7";
                                          }
                                          if (ev.Get("log.level") !== "ERROR") {
                                              throw "expected log.level === ERROR";
                                          }
                                          ev = process(new Event({log: {level: "php7:warning"}}));
                                          if (ev.Get("log.level") !== "WARN") {
                                              throw "expected log.level === WARN";
                                          }
                                          ev = process(new Event({log: {level: "php7:debug"}}));
                                          if (ev.Get("log.level") !== "DEBUG") {
                                              throw "expected log.level === DEBUG";
                                          }
                                          ev = process(new Event({log: {level: "php7:notice"}}));
                                          if (ev.Get("log.level") !== "INFO") {
                                              throw "expected log.level === INFO";
                                          }
                                          ev = process(new Event({log: {level: "php7:info"}}));
                                          if (ev.Get("log.level") !== "INFO") {
                                              throw "expected log.level === INFO";
                                          }
                                          ev = process(new Event({log: {level: "php7:alert"}}));
                                          if (ev.Get("log.level") !== "ALERT") {
                                              throw "expected log.level === ALERT";
                                          }
                                          ev = process(new Event({log: {level: "php7:emerg"}}));
                                          if (ev.Get("log.level") !== "CRIT") {
                                              throw "expected log.level === CRIT";
                                          }
                                          ev = process(new Event({log: {level: "php7:crit"}}));
                                          if (ev.Get("log.level") !== "CRIT") {
                                              throw "expected log.level === CRIT";
                                          }
                                          ev = process(new Event({log: {level: "php7:trace"}}));
                                          if (ev.Get("log.level") !== "TRACE") {
                                              throw "expected log.level === TRACE";
                                          }
                                          ev = process(new Event({log: {level: "php7:trace8"}}));
                                          if (ev.Get("log.level") !== "TRACE") {
                                              throw "expected log.level === TRACE";
                                          }
                                      };
                            else:
                                # access logs
                                # 2019-09-13 21:35:43.177728 | 127.0.0.1 | - | "GET /commander/favicon.ico HTTP/1.1" 200 1446 199 - 140562223949632
                              - dissect:
                                  tokenizer: "%{timestamp} | %{address} | %{user} | %{message}"
                                  field: "message"
                                  target_prefix: "log"
                              - add_fields:
                                  target: ''
                                  fields:
                                    log.level: "INFO"
                      - timestamp:
                          field: "log.timestamp"
                          layouts:
                            - '2006-01-02 15:04:05.999999'
                          test:
                            - '2019-09-13 21:35:43.177728'
              - condition.not:
                  or:
                    - equals:
                        kubernetes.container.name: "flow-web"
                config:
                  - type: docker
                    containers.ids:
                      - ${data.kubernetes.container.id}
                    fields_under_root: true
                    fields:
                      cbflow.component: "other"
                    processors:
                      - convert:
                          fields:
                            - {from: "message", to: "log.message"}

      output.file:
        enabled: false
      
      output.elasticsearch:
        hosts: ["es-test:9200"]
        protocol: "https"
        username: "admin"
        password: "changeme"
        ssl.enabled: "true"
        ssl.certificate_authorities: ["/usr/share/filebeat/config/certs/ca.crt"]
        ssl.verification_mode: "none"
      setup.kibana:
        host: "https://es-kibana:5601"
        ssl.enabled: true
        ssl.certificate_authorities: ["/usr/share/filebeat/config/certs/ca.crt"]
        ssl.verification_mode: "none"\
      setup.template:
        enabled: true
        name: "cbf-template"
        pattern: "cbf-*"
      logging.level: info
      logging.to_files: true
      logging.files:
        path: /var/log/filebeat
        name: filebeat
        keepfiles: 7
        permissions: 0640      
  # Only used when updateStrategy is set to "RollingUpdate"
  maxUnavailable: 1
  nodeSelector: {}
  # A list of secrets and their paths to mount inside the pod
  # This is useful for mounting certificates for security other sensitive values
  secretMounts: []
  #  - name: filebeat-certificates
  #    secretName: filebeat-certificates
  #    path: /usr/share/filebeat/certs
  # Various pod security context settings. Bear in mind that many of these have an impact on Filebeat functioning properly.
  #
  # - User that the container will execute as. Typically necessary to run as root (0) in order to properly collect host container logs.
  # - Whether to execute the Filebeat containers as privileged containers. Typically not necessarily unless running within environments such as OpenShift.
  securityContext:
    runAsUser: 0
    privileged: false
  resources:
    requests:
      cpu: "100m"
      memory: "100Mi"
    limits:
      cpu: "1000m"
      memory: "200Mi"
  tolerations: []

deployment:
  # Annotations to apply to the deployment
  annotations: {}
  # additionals labels
  labels: {}
  affinity: {}
  # Include the deployment
  enabled: false
  # Extra environment variables for Filebeat container.
  envFrom: []
  # - configMapRef:
  #     name: config-secret
  extraEnvs: []
  #  - name: MY_ENVIRONMENT_VAR
  #    value: the_value_goes_here
  # Allows you to add any config files in /usr/share/filebeat
  extraVolumes: []
  # - name: extras
  #   emptyDir: {}
  extraVolumeMounts: []
  # - name: extras
  #   mountPath: /usr/share/extras
  #   readOnly: true
  # such as filebeat.yml for deployment
  filebeatConfig:
    filebeat.yml: |
      filebeat.inputs:
      - type: tcp
        max_message_size: 10MiB
        host: "localhost:9000"

      output.elasticsearch:
        hosts: ["es-test:9200"]
        protocol: "https"
        username: "admin"
        password: "changeme"
        ssl.enabled: "true"
        ssl.certificate_authorities: ["/usr/share/filebeat/config/certs/ca.crt"]
        ssl.verification_mode: "none"
      setup.kibana:
        host: "https://es-kibana:5601"
        ssl.enabled: true
        ssl.certificate_authorities: ["/usr/share/filebeat/config/certs/ca.crt"]
        ssl.verification_mode: "none" 
      logging.level: info
      logging.to_files: true
      logging.files:
        path: /var/log/filebeat
        name: filebeat
        keepfiles: 7
        permissions: 0640             
  nodeSelector: {}
  # A list of secrets and their paths to mount inside the pod
  # This is useful for mounting certificates for security other sensitive values
  secretMounts: []
  #  - name: filebeat-certificates
  #    secretName: filebeat-certificates
  #    path: /usr/share/filebeat/certs
  #
  # - User that the container will execute as.
  # Not necessary to run as root (0) as the Filebeat Deployment use cases do not need access to Kubernetes Node internals
  # - Typically not necessarily unless running within environments such as OpenShift.
  securityContext:
    runAsUser: 0
    privileged: false
  resources:
    requests:
      cpu: "100m"
      memory: "100Mi"
    limits:
      cpu: "1000m"
      memory: "200Mi"
  tolerations: []

# Replicas being used for the filebeat deployment
replicas: 1

extraContainers: ""
# - name: dummy-init
#   image: busybox
#   command: ['echo', 'hey']

extraInitContainers: []
# - name: dummy-init

# Root directory where Filebeat will write data to in order to persist registry data across pod restarts (file position and other metadata).
hostPathRoot: /var/lib

dnsConfig: {}
# options:
#   - name: ndots
#     value: "2"
hostAliases: []
#- ip: "127.0.0.1"
#  hostnames:
#  - "foo.local"
#  - "bar.local"
image: "docker.elastic.co/beats/filebeat"
imageTag: "7.17.1"
imagePullPolicy: "IfNotPresent"
imagePullSecrets: []

livenessProbe:
  exec:
    command:
      - sh
      - -c
      - |
        #!/usr/bin/env bash -e
        curl --fail 127.0.0.1:5066
  failureThreshold: 3
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5

readinessProbe:
  exec:
    command:
      - sh
      - -c
      - |
        #!/usr/bin/env bash -e
        filebeat test output
  failureThreshold: 3
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5

# Whether this chart should self-manage its service account, role, and associated role binding.
managedServiceAccount: true

clusterRoleRules:
  - apiGroups:
      - ""
    resources:
      - namespaces
      - nodes
      - pods
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "apps"
    resources:
      - replicasets
    verbs:
      - get
      - list
      - watch

podAnnotations:
  {}
  # iam.amazonaws.com/role: es-cluster

# Custom service account override that the pod will use
serviceAccount: ""

# Annotations to add to the ServiceAccount that is created if the serviceAccount value isn't set.
serviceAccountAnnotations:
  {}
  # eks.amazonaws.com/role-arn: arn:aws:iam::111111111111:role/k8s.clustername.namespace.serviceaccount

# How long to wait for Filebeat pods to stop gracefully
terminationGracePeriod: 30
# This is the PriorityClass settings as defined in
# https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
priorityClassName: ""

updateStrategy: RollingUpdate

# Override various naming aspects of this chart
# Only edit these if you know what you're doing
nameOverride: ""
fullnameOverride: "es-filebeat"

# DEPRECATED
affinity: {}
envFrom: []
extraEnvs: []
extraVolumes: []
extraVolumeMounts: []
# Allows you to add any config files in /usr/share/filebeat
# such as filebeat.yml for both daemonset and deployment
filebeatConfig: {}
nodeSelector: {}
podSecurityContext: {}
resources: {}
secretMounts:
  - name: elastic-certificates
    secretName: cdro-ca-cert
    path: /usr/share/filebeat/config/certs
    defaultMode: "0755"
tolerations: []
labels: {}
